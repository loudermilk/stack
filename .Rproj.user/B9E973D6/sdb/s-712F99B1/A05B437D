{
    "contents" : "## stack-mysql.R\n##\n## Create MySQL database and tables for StackExchange data\n##\n## Assumes:\n## (1) MySQL server instance running\n##     $ mysql -u root -p\n## (2) has a database called 'stackexchange'\n##     mysql> CREATE DATABASE stackexchange;\n##     mysql> USE stackexchange;\n## (3) user privileges set\n##     mysql> CREATE USER 'foobar'@'localhost' IDENTIFIED BY 'password'\n##     mysql> GRANT ALL PRIVILEGES ON *.* TO foobar@localhost IDENTIFIED BY 'password' WITH GRANT OPTION;\n##     $ mysql --host=localhost --user=foobar --password=password stackexchange\n##\n## Useful SQL commands:\n## mysql> SHOW DATABASES;\n## mysql> USE database;\n## mysql> SHOW TABLES;\n## mysql> DESCRIBE table;\n## mysql> DROP TABLE table;\n##\nlibrary(RMySQL)\n\n\n\n#' @title Create SQL Table\n#'\n#' @param con connection\n#' @param name character name of table\n#' @param data data.frame\n#'\ncreateSQLTable <- function(con, name, data) {\n  dbWriteTable(conn = con,\n               name = name,\n               value = data,\n               overwrite = TRUE,\n               row.names = FALSE,\n               append = FALSE)\n}\n\n\n#' @title Create StackExchange SQL Tables\n#'\n#' @description Creates all SE SQL tables\n#'\ncreateStackExchangeSQLTables <- function() {\n\n  #' @title Default connection to MySQL\n  #' @description manually code fields below to your setup\n  DEF_CONNECTION <- dbConnect(MySQL(),\n                              user = 'brandon',\n                              password = 'password',\n                              host = 'localhost',\n                              dbname='stackexchange')\n\n  #' Create new SQL table\n  #' @param type character\n  #' @description Given a supported SE table type\n  #' create a corpus from the XML file, then create\n  #' a data.frame which is used to generate the\n  #' SQL table\n  newSQLTable <- function(type) {\n    print(paste(\"Creating table...\", type))\n    corpus <- newSECorpus(type)\n    if (type %in% c(\"Comments\", \"Posts\", \"Users\", \"PostHistorys\")) {\n      data <- corpusToDF(corpus, add_content = TRUE)\n    } else {\n      data <- corpusToDF(corpus)\n    }\n    data$id <- NULL # SQL isn't case sensitive (ID/id the same)\n    createSQLTable(con = DEF_CONNECTION, name = type, data = data)\n  }\n\n  ## create SQL table for all supported stackexchange tables\n  mapply(newSQLTable, names(SE))\n}\n\n\n#' @title Do random SQL database stuff\n#'\n#' @description Not a \"real\" function, just a place to\n#' store various idioms and db functions as examples.\n#'\ndoDBStuff <- function(){\n  DEF_CONNECTION <- NULL #turning this off until #14 fixed\n\n  ## list all database tables\n  dbListTables(DEF_CONNECTION)\n\n  ## create a new table\n  dbWriteTable(DEF_CONNECTION, \"mtcars\", mtcars)\n  dbListTables(DEF_CONNECTION)\n\n  ## list the column names\n  dbListFields(DEF_CONNECTION, \"mtcars\")\n\n  ## create data.frame from table\n  foo <- dbReadTable(DEF_CONNECTION, \"mtcars\")\n  class(foo)\n\n  ## create and execute SQL select statements\n\n  ## GET ALL QUESTIONS\n  q <- \"SELECT Id, OwnerUserId FROM Posts WHERE PostTypeId='1' LIMIT 10;\"\n\n  ## GET USER INFO FOR POST NODE\n  q <- \"SELECT p.Id, p.OwnerUserId, u.DisplayName, u.Reputation, u.CreationDate\n        FROM Posts as p, Users as u\n        WHERE p.Id='7'\n          AND p.OwnerUserId=u.Id;\"\n\n  q <- \"SELECT p.ParentId FROM Posts as p WHERE p.ParentId='7'\"\n\n  res <- dbSendQuery(DEF_CONNECTION, q)\n  dbFetch(res)\n  dbClearResult(res)\n\n  ## Or a chunk at a time\n  res <- dbSendQuery(DEF_CONNECTION, \"SELECT * FROM mtcars WHERE cyl = 4\")\n  while(!dbHasCompleted(res)){\n    chunk <- dbFetch(res, n = 5)\n    print(nrow(chunk))\n  }\n  # Clear the result\n  dbClearResult(res)\n\n  # Disconnect from the database\n  dbDisconnect(DEF_CONNECTION)\n}\n",
    "created" : 1464882132071.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "206485448",
    "id" : "A05B437D",
    "lastKnownWriteTime" : 1464883365,
    "path" : "~/repo/stack/R/stack-mysql.R",
    "project_path" : "R/stack-mysql.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}